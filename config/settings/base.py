"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 4.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

import os
from datetime import timedelta
from pathlib import Path
from typing import Literal

import environ
from pydantic_settings import BaseSettings

env = environ.Env()

EnvironmentType = Literal["dev", "staging", "prod"]


class GeneralSettings(BaseSettings):
    DEBUG: bool = False
    SECRET_KEY: str
    ENVIRONMENT: EnvironmentType
    METER_SERVICES_URL: str
    METER_SERVICES_TOKEN: str


GENERAL_SETTINGS = GeneralSettings()
METER_SERVICES_URL = GENERAL_SETTINGS.METER_SERVICES_URL
METER_SERVICES_TOKEN = GENERAL_SETTINGS.METER_SERVICES_TOKEN


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = GENERAL_SETTINGS.SECRET_KEY

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = GENERAL_SETTINGS.DEBUG


APP_DOMAIN = env("APP_DOMAIN", default="http://localhost:8000")

# FILE_UPLOAD_STORAGE = env(\
# "FILE_UPLOAD_STORAGE", default="local")  # local | s3


# Application definition
DJANGO_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
]

THIRD_PARTY_APPS = [
    "rest_framework",
    "rest_framework_simplejwt",
    "rest_framework.authtoken",
    "djoser",
    "anymail",
    "corsheaders",
    "django_extensions",
    "drf_yasg",
    "django_filters",
]

CUSTOM_APPS = [
    "authentication",
    "media",
    "wallet",
]

INSTALLED_APPS = DJANGO_APPS + THIRD_PARTY_APPS + CUSTOM_APPS

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "config.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        # "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
            "loaders": [
                (
                    "django.template.loaders.app_directories.Loader",
                    [BASE_DIR / "templates"],
                ),
            ],
        },
    },
]

WSGI_APPLICATION = "config.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": (
            "django.contrib.auth.password_validation."
            "UserAttributeSimilarityValidator"
        ),
    },
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator"},
    {
        "NAME": (
            "django.contrib.auth.password_validation.CommonPasswordValidator"
        )
    },
    {
        "NAME": (
            "django.contrib.auth.password_validation.NumericPasswordValidator"
        )
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "Africa/Lagos"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = "static/"
STATIC_ROOT = BASE_DIR / "staticfiles"
STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

CORS_ALLOW_ALL_ORIGINS = True

REST_USE_JWT = True

REST_FRAMEWORK = {
    "DEFAULT_PERMISSION_CLASSES": (
        "rest_framework.permissions.IsAuthenticated",
    ),
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication",
        "rest_framework.authentication.SessionAuthentication",
    ),
}

SIMPLE_JWT = {
    "USER_ID_FIELD": "pk",
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=60),
    "AUTH_HEADER_TYPES": ("Bearer", "JWT"),
    "SLIDING_TOKEN_REFRESH_LIFETIME": timedelta(days=1),
    "SLIDING_TOKEN_LIFETIME": timedelta(days=30),
    "SLIDING_TOKEN_REFRESH_LIFETIME_LATE_USER": timedelta(days=1),
    "SLIDING_TOKEN_LIFETIME_LATE_USER": timedelta(days=30),
}

AUTH_USER_MODEL = "authentication.User"


class EmailConfig(BaseSettings):
    EMAIL_BACKEND: str
    EMAIL_HOST: str
    EMAIL_PORT: int
    EMAIL_USE_TLS: bool
    EMAIL_USE_SSL: bool
    EMAIL_HOST_USER: str
    EMAIL_HOST_PASSWORD: str


EMAIl_CONFIG = EmailConfig()

EMAIL_BACKEND = EMAIl_CONFIG.EMAIL_BACKEND
EMAIL_HOST = EMAIl_CONFIG.EMAIL_HOST
EMAIL_PORT = EMAIl_CONFIG.EMAIL_PORT
EMAIL_USE_TLS = EMAIl_CONFIG.EMAIL_USE_TLS
EMAIL_USE_SSL = EMAIl_CONFIG.EMAIL_USE_SSL
EMAIL_HOST_USER = EMAIl_CONFIG.EMAIL_HOST_USER
EMAIL_HOST_PASSWORD = EMAIl_CONFIG.EMAIL_HOST_PASSWORD


class AWSConfig(BaseSettings):
    AWS_PRESIGNED_EXPIRY: int
    AWS_S3_ACCESS_KEY_ID: str
    AWS_S3_SECRET_ACCESS_KEY: str
    AWS_S3_REGION_NAME: str
    AWS_STORAGE_BUCKET_NAME: str
    AWS_DEFAULT_ACL: str
    AWS_S3_SIGNATURE_VERSION: str


AWS_CONFIG = AWSConfig()

FILE_UPLOAD_STORAGE = env("FILE_UPLOAD_STORAGE")

if FILE_UPLOAD_STORAGE == "local":
    MEDIA_ROOT_NAME = "media"
    MEDIA_ROOT = os.path.join(BASE_DIR, MEDIA_ROOT_NAME)
    MEDIA_URL = f"/{MEDIA_ROOT_NAME}/"

if FILE_UPLOAD_STORAGE == "s3":
    # Using django-storages
    # https://django-storages.readthedocs.io/en/latest/backends/amazon-S3.html
    DEFAULT_FILE_STORAGE = "storages.backends.s3boto3.S3Boto3Storage"

    AWS_S3_ACCESS_KEY_ID = AWS_CONFIG.AWS_S3_ACCESS_KEY_ID
    AWS_S3_SECRET_ACCESS_KEY = AWS_CONFIG.AWS_S3_SECRET_ACCESS_KEY
    AWS_STORAGE_BUCKET_NAME = AWS_CONFIG.AWS_STORAGE_BUCKET_NAME
    AWS_S3_REGION_NAME = AWS_CONFIG.AWS_S3_REGION_NAME
    AWS_S3_SIGNATURE_VERSION = AWS_CONFIG.AWS_S3_SIGNATURE_VERSION or "s3v4"

    # https://docs.aws.amazon.com/AmazonS3/latest/userguide/acl-overview.html#canned-acl
    AWS_DEFAULT_ACL = AWS_CONFIG.AWS_DEFAULT_ACL or "private"

    AWS_PRESIGNED_EXPIRY = AWS_CONFIG.AWS_PRESIGNED_EXPIRY or 10  # seconds


# ENVIRONMENT = GENERAL_SETTINGS.ENVIRONMENT
# if ENVIRONMENT == "dev":
#     PAYSTACK_SECRET_KEY = env("PAYSTACK_TEST_SECRET_KEY")
# else:
#     PAYSTACK_SECRET_KEY = env("PAYSTACK_LIVE_SECRET_KEY")

PAYSTACK_SECRET_KEY = env("PAYSTACK_LIVE_SECRET_KEY")


class CloudinaryConfig(BaseSettings):
    CLOUDINARY_CLOUD_NAME: str
    CLOUDINARY_API_KEY: str
    CLOUDINARY_API_SECRET: str


CLOUDINARY_CONFIG = CloudinaryConfig()
